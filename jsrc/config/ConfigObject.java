package config;

import java.util.Arrays;
import java.util.List;

  /**
   *  The <b>ConfigObject</b> class is used to provide an abstract interface to
   *  the values of an object attributes, relationships and the object's identity.
   *  The class redirects all the calls to the {@link ConfigObjectImpl implementation}.
   *  <p>
   *  <font color="red">There is no a reason to use such class directly if a package 
   *  generated by genconfig is used to access the database information.</font>
   *  <p>
   *  The methods returning values of attributes or relationships can throw several exceptions:
   *  <ul>
   *   <li><code>{@link NotFoundException}</code> - in case of wrong attribute or relationship name
   *   <li><code>{@link SystemException}</code> - if case of system problems (communications, implementation database failure, etc.)
   *  </ul>
   *
   *  @author  http://consult.cern.ch/xwho/people/432778
   *  @since   online release 00-21-00
   */

public class ConfigObject
{
  private ConfigObjectImpl m_impl;

  boolean m_is_created;
  boolean m_is_updated;
  boolean m_is_valid;


    /**
     *  Constructor to build the object for given implementation object.
     *  @param impl the implementation object
     */

  public ConfigObject(ConfigObjectImpl impl) { m_impl = impl; m_is_created = false; m_is_updated = false; m_is_valid = true; }

    /** Returns the object's implementation */

  public ConfigObjectImpl implementation() { return m_impl; }

    /** Returns the object's identity as it is defined in the database */

  public String UID() { return m_impl.UID(); }

    /** Returns name the object's database class */

  public String class_name() { return m_impl.class_name(); }

    /** Returns true if object was created not not committed yet */

  public boolean is_created() { return m_is_created; }

    /** Returns true if object was updated not not committed yet */

  public boolean is_updated() { return m_is_updated; }

    /** Returns true if object is valid; The method may return false, if object was destroyed, e.g. in result of abort() method */

  public boolean is_valid() { return m_is_valid; }

  
    /**
     *  Read from database value of a boolean attribute with given name
     *  @param name attribute name
     */

  public boolean get_bool(String name) throws NotFoundException, SystemException { return m_impl.get_bool(name); }

    /**
     *  Read from database value of a single character attribute with given name
     *  @param name attribute name
     */

  public char get_char(String name) throws NotFoundException, SystemException { return m_impl.get_char(name); }

    /**
     *  Read from database value of a byte-length integer attribute with given name
     *  @param name attribute name
     */

  public byte get_byte(String name) throws NotFoundException, SystemException { return m_impl.get_byte(name); }

    /**
     *  Read from database value of a short integer attribute with given name
     *  @param name attribute name
     */

  public short get_short(String name) throws NotFoundException, SystemException { return m_impl.get_short(name); }

    /**
     *  Read from database value of an integer attribute with given name
     *  @param name attribute name
     */

  public int get_int(String name) throws NotFoundException, SystemException { return m_impl.get_int(name); }

    /**
     *  Read from database value of a long (64 bits) integer attribute with given name
     *  @param name attribute name
     */

  public long get_long(String name) throws NotFoundException, SystemException { return m_impl.get_long(name); }

    /**
     *  Read from database value of a single-precision floating point real number attribute with given name
     *  @param name attribute name
     */

  public float get_float(String name) throws NotFoundException, SystemException { return m_impl.get_float(name); }

    /**
     *  Read from database value of a double-precision floating point real number attribute with given name
     *  @param name attribute name
     */

  public double get_double(String name) throws NotFoundException, SystemException { return m_impl.get_double(name); }

    /**
     *  Read from database value of a string attribute with given name
     *  @param name attribute name
     */

  public String get_string(String name) throws NotFoundException, SystemException { return m_impl.get_string(name); }

    /**
     *  Read from database array of values of a boolean attribute with given name
     *  @param name attribute name
     */

  public boolean[] get_bools(String name) throws NotFoundException, SystemException { return m_impl.get_bools(name); }

    /**
     *  Read from database array of values of a single character attribute with given name
     *  @param name attribute name
     */

  public char[] get_chars(String name) throws NotFoundException, SystemException { return m_impl.get_chars(name); }

    /**
     *  Read from database array of values of a byte-length integer attribute with given name
     *  @param name attribute name
     */

  public byte[] get_bytes(String name) throws NotFoundException, SystemException { return m_impl.get_bytes(name); }

    /**
     *  Read from database array of values of a short integer attribute with given name
     *  @param name attribute name
     */

  public short[] get_shorts(String name) throws NotFoundException, SystemException { return m_impl.get_shorts(name); }

    /**
     *  Read from database array of values of an integer attribute with given name
     *  @param name attribute name
     */

  public int[] get_ints(String name) throws NotFoundException, SystemException { return m_impl.get_ints(name); }

    /**
     *  Read from database array of values of a long (64 bits) integer attribute with given name
     *  @param name attribute name
     */

  public long[] get_longs(String name) throws NotFoundException, SystemException { return m_impl.get_longs(name); }

    /**
     *  Read from database array of values of a single-precision floating point real number attribute with given name
     *  @param name attribute name
     */

  public float[] get_floats(String name) throws NotFoundException, SystemException { return m_impl.get_floats(name); }

    /**
     *  Read from database array of values of a double-precision floating point real number attribute with given name
     *  @param name attribute name
     */

  public double[] get_doubles(String name) throws NotFoundException, SystemException { return m_impl.get_doubles(name); }

    /**
     *  Read from database array of values of a string attribute with given name
     *  @param name attribute name
     */

  public String[] get_strings(String name) throws NotFoundException, SystemException { return m_impl.get_strings(name); }

    /**
     *  Read from database value of a single-value relationship with given name
     *  @param name attribute name
     */

  public ConfigObject get_object(String name)  throws NotFoundException, SystemException { return m_impl.get_object(name); }

    /**
     *  Read from database array of values of a multi-value relationship with given name
     *  @param name attribute name
     */

  public ConfigObject[] get_objects(String name) throws NotFoundException, SystemException { return m_impl.get_objects(name); }

    /**
     *  Set value of a boolean attribute with given name
     *  @param name  attribute name
     *  @param value new attribute value
     */

  public void set_bool(String name, boolean value) throws NotFoundException, NotAllowedException, SystemException { m_impl.set_bool(name, value); m_is_updated = true; get_configuration_object().action_on_object_update(this, name); }

    /**
     *  Set value of a single character attribute with given name
     *  @param name  attribute name
     *  @param value new attribute value
     */

  public void set_char(String name, char value) throws NotFoundException, NotAllowedException, SystemException { m_impl.set_char(name, value); m_is_updated = true; get_configuration_object().action_on_object_update(this, name); }

    /**
     *  Set value of a byte-length integer attribute with given name
     *  @param name  attribute name
     *  @param value new attribute value
     */

  public void set_byte(String name, byte value) throws NotFoundException, NotAllowedException, SystemException { m_impl.set_byte(name, value); m_is_updated = true; get_configuration_object().action_on_object_update(this, name); }

    /**
     *  Set value of a short integer attribute with given name
     *  @param name  attribute name
     *  @param value new attribute value
     */

  public void set_short(String name, short value) throws NotFoundException, NotAllowedException, SystemException { m_impl.set_short(name, value); m_is_updated = true; get_configuration_object().action_on_object_update(this, name); }

    /**
     *  Set value of an integer attribute with given name
     *  @param name  attribute name
     *  @param value new attribute value
     */

  public void set_int(String name, int value) throws NotFoundException, NotAllowedException, SystemException { m_impl.set_int(name, value); m_is_updated = true; get_configuration_object().action_on_object_update(this, name); }

    /**
     *  Set value of a long (64 bits) integer attribute with given name
     *  @param name  attribute name
     *  @param value new attribute value
     */

  public void set_long(String name, long value) throws NotFoundException, NotAllowedException, SystemException { m_impl.set_long(name, value); m_is_updated = true; get_configuration_object().action_on_object_update(this, name); }

    /**
     *  Set value of a single-precision floating point real number attribute with given name
     *  @param name  attribute name
     *  @param value new attribute value
     */

  public void set_float(String name, float value) throws NotFoundException, NotAllowedException, SystemException { m_impl.set_float(name, value); m_is_updated = true; get_configuration_object().action_on_object_update(this, name); }

    /**
     *  Set value of a double-precision floating point real number attribute with given name
     *  @param name  attribute name
     *  @param value new attribute value
     */

  public void set_double(String name, double value) throws NotFoundException, NotAllowedException, SystemException { m_impl.set_double(name, value); m_is_updated = true; get_configuration_object().action_on_object_update(this, name); }

    /**
     *  Set value of a string attribute with given name
     *  @param name  attribute name
     *  @param value new attribute value
     */

  public void set_string(String name, String value) throws NotFoundException, NotAllowedException, SystemException { m_impl.set_string(name, value); m_is_updated = true; get_configuration_object().action_on_object_update(this, name); }

    /**
     *  Set array of values of a boolean attribute with given name
     *  @param name  attribute name
     *  @param value new attribute value
     */

  public void set_bools(String name, boolean[] value) throws NotFoundException, NotAllowedException, SystemException { m_impl.set_bools(name, value); m_is_updated = true; get_configuration_object().action_on_object_update(this, name); }

    /**
     *  Set array of values of a single character attribute with given name
     *  @param name  attribute name
     *  @param value array of new attribute values
     */

  public void set_chars(String name, char[] value) throws NotFoundException, NotAllowedException, SystemException { m_impl.set_chars(name, value); m_is_updated = true; get_configuration_object().action_on_object_update(this, name); }

    /**
     *  Set array of values of a byte-length integer attribute with given name
     *  @param name  attribute name
     *  @param value array of new attribute values
     */

  public void set_bytes(String name, byte[] value) throws NotFoundException, NotAllowedException, SystemException { m_impl.set_bytes(name, value); m_is_updated = true; get_configuration_object().action_on_object_update(this, name); }

    /**
     *  Set array of values of a short integer attribute with given name
     *  @param name  attribute name
     *  @param value array of new attribute values
     */

  public void set_shorts(String name, short[] value) throws NotFoundException, NotAllowedException, SystemException { m_impl.set_shorts(name, value); m_is_updated = true; get_configuration_object().action_on_object_update(this, name); }

    /**
     *  Set array of values of an integer attribute with given name
     *  @param name  attribute name
     *  @param value array of new attribute values
     */

  public void set_ints(String name, int[] value) throws NotFoundException, NotAllowedException, SystemException { m_impl.set_ints(name, value); m_is_updated = true; get_configuration_object().action_on_object_update(this, name); }

    /**
     *  Set array of values of a long (64 bits) integer attribute with given name
     *  @param name  attribute name
     *  @param value array of new attribute values
     */

  public void set_longs(String name, long[] value) throws NotFoundException, NotAllowedException, SystemException { m_impl.set_longs(name, value); m_is_updated = true; get_configuration_object().action_on_object_update(this, name); }

    /**
     *  Set array of values of a single-precision floating point real number attribute with given name
     *  @param name  attribute name
     *  @param value array of new attribute values
     */

  public void set_floats(String name, float[] value) throws NotFoundException, NotAllowedException, SystemException { m_impl.set_floats(name, value); m_is_updated = true; get_configuration_object().action_on_object_update(this, name); }

    /**
     *  Set array of values of a double-precision floating point real number attribute with given name
     *  @param name  attribute name
     *  @param value array of new attribute values
     */

  public void set_doubles(String name, double[] value) throws NotFoundException, NotAllowedException, SystemException { m_impl.set_doubles(name, value); m_is_updated = true; get_configuration_object().action_on_object_update(this, name); }

    /**
     *  Set array of values of a string attribute with given name
     *  @param name  attribute name
     *  @param value array of new attribute values
     */

  public void set_strings(String name, String[] value) throws NotFoundException, NotAllowedException, SystemException { m_impl.set_strings(name, value); m_is_updated = true; get_configuration_object().action_on_object_update(this, name); }

    /**
     *  Set value of a single-value relationship with given name
     *  @param name  attribute name
     *  @param value array of new attribute values
     */

  public void set_object(String name, ConfigObject value) throws NotFoundException, NotAllowedException, SystemException { m_impl.set_object(name, value); m_is_updated = true; get_configuration_object().action_on_object_update(this, name); }

    /**
     *  Set array of values of a multi-value relationship with given name
     *  @param name  attribute name
     *  @param value array of new attribute values
     */

  public void set_objects(String name, ConfigObject[] value) throws NotFoundException, NotAllowedException, SystemException { m_impl.set_objects(name, value); m_is_updated = true; get_configuration_object().action_on_object_update(this, name); }

    /**
     *  Clear all resources associated with given object which are hold by the implementation object.
     */

  public void clean() {m_impl.clean();}

    /**
	 * Get objects which have references to given object.
	 * 
	 * The method returns objects, which have references on given object via
	 * explicitly provided relationship name. If the relationship name is set to
	 * "*", then the method takes into account all relationships of all objects.
	 * The method is efficient only for composite relationships (i.e. when a
	 * parent has composite reference on this object). For generic relationships
	 * the method performs full scan of all database objects. It is not
	 * recommended at large scale to build complete graph of relations between
	 * all database object.
	 * 
	 * @param value
	 *            returned objects
	 * @param relationship_name
	 *            name of relationship (pass "*" to return objects referencing
	 *            via ANY relationship)
	 * @param check_composite_only
	 *            only returned composite parent objects
	 * 
	 * @throws SystemException
	 *             in case of a problem
	 */

    public void referenced_by(List<ConfigObject> value, String relationship_name, boolean check_composite_only)
        throws NotFoundException, SystemException
      {
        m_impl.referenced_by(value, relationship_name, check_composite_only);
      }

    /**
     *  Print out object's identity and class name.
     */

  public void print() {
    System.out.println( "object \"" + UID() + "@" + class_name() + "\"" );
  }


    /**
     * Print out all object's properties.
     * 
     * @param prefix
     *          string prefix (shift used for nested types)
     */

    public void print_ref(String prefix)
      {

        System.out.println(prefix + "Object:");
        System.out.println(prefix + "  id: \'" + UID() + "\', class name: \'" + class_name() + '\'');

        try
          {
            config.class_t cd = m_impl.get_configuration_impl().get_configuration().get_class_info(class_name(), false);

            if (cd.get_attributes() != null)
              {
                for (attribute_t x : cd.get_attributes())
                  {
                    System.out.print(prefix + "  " + x.get_name() + ": ");

                    attribute_t.type_t type = x.get_type();

                    switch (type)
                      {
                      case string_type:
                      case enum_type:
                      case date_type:
                      case time_type:
                      case class_type:
                        if (x.get_is_multi_value() == false)
                          {
                            System.out.println('\'' + get_string(x.get_name()) + '\'');
                          }
                        else
                          {
                            System.out.println(Arrays.toString(get_strings(x.get_name())));
                          }
                        break;

                      case bool_type:
                        if (x.get_is_multi_value() == false)
                          {
                            System.out.println(get_bool(x.get_name()));
                          }
                        else
                          {
                            System.out.println(Arrays.toString(get_bools(x.get_name())));
                          }
                        break;

                      case double_type:
                        if (x.get_is_multi_value() == false)
                          {
                            System.out.println(get_double(x.get_name()));
                          }
                        else
                          {
                            System.out.println(Arrays.toString(get_doubles(x.get_name())));
                          }
                        break;

                      case float_type:
                        if (x.get_is_multi_value() == false)
                          {
                            System.out.println(get_float(x.get_name()));
                          }
                        else
                          {
                            System.out.println(Arrays.toString(get_floats(x.get_name())));
                          }
                        break;

                      case s16_type:
                      case u16_type:
                        if (x.get_is_multi_value() == false)
                          {
                            System.out.println(get_short(x.get_name()));
                          }
                        else
                          {
                            System.out.println(Arrays.toString(get_shorts(x.get_name())));
                          }
                        break;

                      case s32_type:
                      case u32_type:
                        if (x.get_is_multi_value() == false)
                          {
                            System.out.println(get_int(x.get_name()));
                          }
                        else
                          {
                            System.out.println(Arrays.toString(get_ints(x.get_name())));
                          }
                        break;

                      case s64_type:
                      case u64_type:
                        if (x.get_is_multi_value() == false)
                          {
                            System.out.println(get_long(x.get_name()));
                          }
                        else
                          {
                            System.out.println(Arrays.toString(get_longs(x.get_name())));
                          }
                        break;

                      case s8_type:
                        if (x.get_is_multi_value() == false)
                          {
                            System.out.println(get_char(x.get_name()));
                          }
                        else
                          {
                            System.out.println(Arrays.toString(get_chars(x.get_name())));
                          }
                        break;

                      case u8_type:
                        if (x.get_is_multi_value() == false)
                          {
                            System.out.println(get_byte(x.get_name()));
                          }
                        else
                          {
                            System.out.println(Arrays.toString(get_bytes(x.get_name())));
                          }
                        break;

                      default:
                        System.out.println("*** bad type ***");
                        break;
                      }
              }
          }

        if (cd.get_relationships() != null)
          {
            for (relationship_t x : cd.get_relationships())
              {
                System.out.print(prefix + "  " + x.get_name() + ": ");
                if(x.get_cardinality() == config.relationship_t.cardinality_t.only_one || x.get_cardinality() == config.relationship_t.cardinality_t.zero_or_one)
                  {
                    ConfigObject o = get_object(x.get_name());
                    if(o != null)
                      {
                        System.out.println("\'" + o.UID() + "@" + o.class_name() + "\'");
                      }
                    else
                      {
                        System.out.println("(null)");
                      }
                  }
                else
                  {
                    ConfigObject objs[] = get_objects(x.get_name());
                    boolean is_first = true;
                    for(ConfigObject o : objs)
                      {
                        if(is_first == false) System.out.print(", ");
                        System.out.print("\'" + o.UID() + "@" + o.class_name() + "\'");
                        is_first = false;
                      }
                    System.out.println();
                  }
              }
          }
      }
    catch(final ConfigException ex)
      {
        ers.Logger.error(ex);
      }
  }

    /** Returns the configuration object */

  private Configuration get_configuration_object() {
    return m_impl.get_configuration_impl().get_configuration();
  }

}
