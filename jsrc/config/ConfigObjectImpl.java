package config;

import java.util.List;

  /**
   *  The <b>ConfigObjectImpl</b> interface is used to declare abstract interface to access
   *  the values of an object attributes, relationships and the object's identity.
   *  <p>
   *  <font color="red">There is no a reason to use such interface directly if a package 
   *  generated by genconfig is used to access the database information.</font>
   *  <p>
   *  The methods returning values of attributes or relationships can throw several exceptions:
   *  <ul>
   *   <li><code>{@link NotFoundException}</code> - in case of wrong attribute or relationship name
   *   <li><code>{@link SystemException}</code> - if case of system problems (communications, implementation database failure, etc.)
   *  </ul>
   *
   *  @author  http://consult.cern.ch/xwho/people/432778
   *  @since   online release 00-21-00
   */


public interface ConfigObjectImpl
{
    /** Read from implementation the object's identity as it is defined in the database */

  String UID();

    /** Read from implementation name the object's database class */

  String class_name();
  
    /** Return configuration implementation object */

  ConfigurationImpl get_configuration_impl();

    /** Read from implementation value of a boolean attribute with given name */

  boolean get_bool(String name) throws NotFoundException, SystemException;

    /** Read from implementation value of a single character attribute with given name */

  char get_char(String name) throws NotFoundException, SystemException;

    /** Read from implementation value of a byte-length integer attribute with given name */

  byte get_byte(String name) throws NotFoundException, SystemException;

    /** Read from implementation value of a short integer attribute with given name */

  short get_short (String name) throws NotFoundException, SystemException;

    /** Read from implementation value of an integer attribute with given name */

  int get_int(String name) throws NotFoundException, SystemException;

    /** Read from implementation value of a long (i.e. 64 bits) integer attribute with given name */

  long get_long(String name) throws NotFoundException, SystemException;

    /** Read from implementation value of a single-precision floating point real number attribute with given name */

  float get_float(String name) throws NotFoundException, SystemException;

    /** Read from implementation value of a double-precision floating point real number attribute with given name */

  double get_double(String name) throws NotFoundException, SystemException;

    /** Read from implementation value of a string attribute with given name */

  String get_string(String name) throws NotFoundException, SystemException;

    /** Read from implementation array of values of a boolean attribute with given name */

  boolean[] get_bools(String name) throws NotFoundException, SystemException;

    /** Read from implementation array of values of a single character attribute with given name */

  char[] get_chars(String name) throws NotFoundException, SystemException;

    /** Read from implementation array of values of a byte-length integer attribute with given name */

  byte[] get_bytes(String name) throws NotFoundException, SystemException;

    /** Read from implementation array of values of a short integer attribute with given name */

  short[] get_shorts(String name) throws NotFoundException, SystemException;

    /** Read from implementation array of values of an integer attribute with given name */

  int[] get_ints(String name) throws NotFoundException, SystemException;

    /** Read from implementation array of values of a long integer attribute with given name */

  long[] get_longs(String name) throws NotFoundException, SystemException;

    /** Read from implementation array of values of a single-precision floating point real number attribute with given name */

  float[] get_floats(String name) throws NotFoundException, SystemException;

    /** Read from implementation array of values of a double-precision floating point real number attribute with given name */

  double[] get_doubles(String name) throws NotFoundException, SystemException;

    /** Read from implementation array of values of a string attribute with given name */

  String[] get_strings(String name) throws NotFoundException, SystemException;

    /** Read from implementation a value of a single-value relationship with given name */

  ConfigObject get_object(String name)  throws NotFoundException, SystemException;

    /** Read from implementation array of value of a multi-value relationship with given name */

  ConfigObject[] get_objects(String name) throws NotFoundException, SystemException;

    /** Set value of a boolean attribute with given name */

  void set_bool(String name, boolean value) throws NotFoundException, NotAllowedException, SystemException;

    /** Set value of a single character attribute with given name */

  void set_char(String name, char value) throws NotFoundException, NotAllowedException, SystemException;

    /** Set value of a byte-length integer attribute with given name */

  void set_byte(String name, byte value) throws NotFoundException, NotAllowedException, SystemException;

    /** Set value of a short integer attribute with given name */

  void set_short(String name, short value) throws NotFoundException, NotAllowedException, SystemException;

    /** Set value of an integer attribute with given name */

  void set_int(String name, int value) throws NotFoundException, NotAllowedException, SystemException;

    /** Set value of a long integer attribute with given name */

  void set_long(String name, long value) throws NotFoundException, NotAllowedException, SystemException;

    /** Set value of a single-precision floating point real number attribute with given name */

  void set_float(String name, float value) throws NotFoundException, NotAllowedException, SystemException;

    /** Set value of a double-precision floating point real number attribute with given name */

  void set_double(String name, double value) throws NotFoundException, NotAllowedException, SystemException;

    /** Set value of a string attribute with given name */

  void set_string(String name, String value) throws NotFoundException, NotAllowedException, SystemException;

    /** Set array of values of a boolean attribute with given name */

  void set_bools(String name, boolean[] value) throws NotFoundException, NotAllowedException, SystemException;

    /** Set array of values of a single character attribute with given name */

  void set_chars(String name, char[] value) throws NotFoundException, NotAllowedException, SystemException;

    /** Set array of values of a byte-length integer attribute with given name */

  void set_bytes(String name, byte[] value) throws NotFoundException, NotAllowedException, SystemException;

    /** Set array of values of a short integer attribute with given name */

  void set_shorts(String name, short[] value) throws NotFoundException, NotAllowedException, SystemException;

    /** Set array of values of an integer attribute with given name */

  void set_ints(String name, int[] value) throws NotFoundException, NotAllowedException, SystemException;

    /** Set array of values of a long integer attribute with given name */

  void set_longs(String name, long[] value) throws NotFoundException, NotAllowedException, SystemException;

    /** Set array of values of a single-precision floating point real number attribute with given name */

  void set_floats(String name, float[] value) throws NotFoundException, NotAllowedException, SystemException;

    /** Set array of values of a double-precision floating point real number attribute with given name */

  void set_doubles(String name, double[] value) throws NotFoundException, NotAllowedException, SystemException;

    /** Set array of values of a string attribute with given name */

  void set_strings(String name, String[] value) throws NotFoundException, NotAllowedException, SystemException;

    /** Set value of a single-value relationship with given name */

  void set_object(String name, ConfigObject value) throws NotFoundException, NotAllowedException, SystemException;

    /** Set array of values of a multi-value relationship with given name */

  void set_objects(String name, ConfigObject[] value) throws NotFoundException, NotAllowedException, SystemException;
  
    /** Get list of objects referencing given object. */

  void referenced_by(List<ConfigObject> value, String relationship_name, boolean check_composite_only) throws NotFoundException, SystemException;

    /** Clear all resources associated with given object. */

  void clean();
}
